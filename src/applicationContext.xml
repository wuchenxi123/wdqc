<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
		
	<!-- 接口注册工具。用于注册接口的默认实现类。InterfaceUtils.createDefaultObject(接口名) 方法可以创建默认的实现类实例。
		以分离接口和实现。
	-->
	<bean id="com.core.jop.common.utils.lang.InterfaceUtils" class="com.core.jop.common.utils.lang.InterfaceUtils">
		<property name="interfaceClassMapping">			
			<props>
				<prop key="com.core.jop.infrastructure.component.Code2Name">com.core.sys.ui.component.DefaultCode2Name</prop>				
				<prop key="com.core.jop.ui.struts2.UserProvider">com.core.jop.ui.struts2.Struts2UserProvider</prop>				
				<prop key="com.core.jop.ui.filter.PermissionChecker">com.core.sys.permission.ctrlperm.web.WebPermissionChecker</prop>	
			</props>
		</property>
	</bean>
		  
	<!-- 单数据源使用	-->  
	<bean id="com.core.jop.infrastructure.db.SessionFactoryRouter" class="com.core.jop.infrastructure.db.hibernate3.Hibernate3SessionFactoryRouter">		
	</bean>
	
	<!-- sessionFactory_DB_COMMON 也可以替换为在 sessionFactory.properties 中需配置 DB_COMMON=hibernate.cfg.xml作为数据源 -->
	<bean id="sessionFactory_DB_COMMON" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">	
		<property name="configLocations">		
			<list>
				<value>classpath:hibernate.cfg.xml</value>
			</list>	
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory_DB_COMMON" />
		</property> 
	</bean>			
		
		
	<!-- ==============================================================BeanNameAutoProxyCreator================================================================================ -->
		
	
	<bean id="BOAutoProxyTrasaction" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">	
		<property name="proxyTargetClass" value="true"></property>
		<property name="frozen" value="true"></property>
		<property name="beanNames">
			<list>
				<value>*BO</value>	
			</list>
		</property>
		<property name="interceptorNames">
			<list>				
				<value>trasactionMethodPointcutAdvisor</value>	<!-- 注意： 事务拦截器必须包含在业务日志拦截器中，以免事务控制混乱；或者将业务日志的方法recordLog 设置为 PROPAGATION_REQUIRES_NEW 属性-->					
			</list>
		</property>
	</bean>
	
	
	<!-- ==============================================================Interceptors================================================================================ -->

	<bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref local="transactionManager"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<!-- 注意开发规范：业务bean的业务方法必须为 do* 格式，才能被包含事务！ -->
				<prop key="do*">PROPAGATION_REQUIRED</prop>	
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>				
			</props>
		</property>
	</bean>
	
	 <bean id="jamonInterceptor" class="org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor"/> 
	 
	<bean id="trasactionMethodPointcutAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="mappedNames">
			<list>
				<value>do*</value>
				<value>get*</value>
				<value>find*</value>
				<value>query*</value>
			</list>
		</property>
		<property name="advice">
			<ref local="transactionAdvisor" />
		</property>
	</bean>
	
</beans>